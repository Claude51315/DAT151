// -*- Java -*- This Cup file was machine-generated by BNFC
package Mini;

parser code {:
  public Mini.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (Mini.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal Mini.Absyn.Program Program;
nonterminal Mini.Absyn.ListStm ListStm;
nonterminal Mini.Absyn.Stm Stm;
nonterminal Mini.Absyn.Exp Exp1;
nonterminal Mini.Absyn.Exp Exp;
nonterminal Mini.Absyn.Type Type;

terminal _SYMB_0;    //   ;
terminal _SYMB_1;    //   =
terminal _SYMB_2;    //   {
terminal _SYMB_3;    //   }
terminal _SYMB_4;    //   +
terminal _SYMB_5;    //   (
terminal _SYMB_6;    //   )
terminal _SYMB_7;    //   double
terminal _SYMB_8;    //   int
terminal _SYMB_9;    //   print



terminal Integer _INTEGER_;
terminal Double _DOUBLE_;
terminal String _IDENT_;



start with Program;


Program ::= ListStm:p_1  {: RESULT = new Mini.Absyn.Prog(p_1); :} 
;
ListStm ::=  /* empty */  {: RESULT = new Mini.Absyn.ListStm(); :} 
  | ListStm:p_1 Stm:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
Stm ::= Type:p_1 _IDENT_:p_2 _SYMB_0  {: RESULT = new Mini.Absyn.SDecl(p_1,p_2); :} 
  | _IDENT_:p_1 _SYMB_1 Exp:p_3 _SYMB_0  {: RESULT = new Mini.Absyn.SAss(p_1,p_3); :}
  | _SYMB_2 ListStm:p_2 _SYMB_3  {: RESULT = new Mini.Absyn.SBlock(p_2); :}
  | _SYMB_9 Exp:p_2 _SYMB_0  {: RESULT = new Mini.Absyn.SPrint(p_2); :}
;
Exp1 ::= _IDENT_:p_1  {: RESULT = new Mini.Absyn.EVar(p_1); :} 
  | _INTEGER_:p_1  {: RESULT = new Mini.Absyn.EInt(p_1); :}
  | _DOUBLE_:p_1  {: RESULT = new Mini.Absyn.EDouble(p_1); :}
  | _SYMB_5 Exp:p_2 _SYMB_6  {: RESULT = p_2; :}
;
Exp ::= Exp:p_1 _SYMB_4 Exp1:p_3  {: RESULT = new Mini.Absyn.EAdd(p_1,p_3); :} 
  | Exp1:p_1  {: RESULT = p_1; :}
;
Type ::= _SYMB_8  {: RESULT = new Mini.Absyn.TInt(); :} 
  | _SYMB_7  {: RESULT = new Mini.Absyn.TDouble(); :}
;

