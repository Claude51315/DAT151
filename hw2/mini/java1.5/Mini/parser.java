
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Nov 19 20:28:23 CET 2015
//----------------------------------------------------

package Mini;


/** CUP v0.10k generated parser.
  * @version Thu Nov 19 20:28:23 CET 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\004\000\002\003\003\000\002\004" +
    "\002\000\002\004\004\000\002\005\005\000\002\005\006" +
    "\000\002\005\005\000\002\005\005\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\005\000\002" +
    "\007\005\000\002\007\003\000\002\010\003\000\002\010" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\016\002\uffff\006\uffff\013\uffff\014\uffff\015" +
    "\uffff\020\uffff\001\002\000\004\002\037\001\002\000\016" +
    "\002\000\006\006\013\013\014\012\015\011\020\010\001" +
    "\002\000\016\006\uffff\007\uffff\013\uffff\014\uffff\015\uffff" +
    "\020\uffff\001\002\000\004\020\033\001\002\000\004\005" +
    "\030\001\002\000\012\011\022\016\017\017\021\020\016" +
    "\001\002\000\004\020\ufff3\001\002\000\004\020\ufff2\001" +
    "\002\000\020\002\ufffe\006\ufffe\007\ufffe\013\ufffe\014\ufffe" +
    "\015\ufffe\020\ufffe\001\002\000\010\004\ufff4\010\ufff4\012" +
    "\ufff4\001\002\000\010\004\ufff9\010\ufff9\012\ufff9\001\002" +
    "\000\010\004\ufff8\010\ufff8\012\ufff8\001\002\000\006\004" +
    "\027\010\024\001\002\000\010\004\ufff7\010\ufff7\012\ufff7" +
    "\001\002\000\012\011\022\016\017\017\021\020\016\001" +
    "\002\000\006\010\024\012\025\001\002\000\012\011\022" +
    "\016\017\017\021\020\016\001\002\000\010\004\ufff6\010" +
    "\ufff6\012\ufff6\001\002\000\010\004\ufff5\010\ufff5\012\ufff5" +
    "\001\002\000\020\002\ufffa\006\ufffa\007\ufffa\013\ufffa\014" +
    "\ufffa\015\ufffa\020\ufffa\001\002\000\012\011\022\016\017" +
    "\017\021\020\016\001\002\000\006\004\032\010\024\001" +
    "\002\000\020\002\ufffc\006\ufffc\007\ufffc\013\ufffc\014\ufffc" +
    "\015\ufffc\020\ufffc\001\002\000\004\004\034\001\002\000" +
    "\020\002\ufffd\006\ufffd\007\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\020\ufffd\001\002\000\016\006\006\007\036\013\013\014" +
    "\012\015\011\020\010\001\002\000\020\002\ufffb\006\ufffb" +
    "\007\ufffb\013\ufffb\014\ufffb\015\ufffb\020\ufffb\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\006\003\003\004\004\001\001\000\002\001" +
    "\001\000\006\005\013\010\006\001\001\000\004\004\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\014\007\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\014\007\022\001\001\000\002\001\001\000\004\006" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\014\007\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\013\010\006\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public Mini.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (Mini.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= _SYMB_7 
            {
              Mini.Absyn.Type RESULT = null;
		 RESULT = new Mini.Absyn.TDouble(); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= _SYMB_8 
            {
              Mini.Absyn.Type RESULT = null;
		 RESULT = new Mini.Absyn.TInt(); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Exp ::= Exp1 
            {
              Mini.Absyn.Exp RESULT = null;
		Mini.Absyn.Exp p_1 = (Mini.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Exp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Exp ::= Exp _SYMB_4 Exp1 
            {
              Mini.Absyn.Exp RESULT = null;
		Mini.Absyn.Exp p_1 = (Mini.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Mini.Absyn.Exp p_3 = (Mini.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Mini.Absyn.EAdd(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Exp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Exp1 ::= _SYMB_5 Exp _SYMB_6 
            {
              Mini.Absyn.Exp RESULT = null;
		Mini.Absyn.Exp p_2 = (Mini.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Exp1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Exp1 ::= _DOUBLE_ 
            {
              Mini.Absyn.Exp RESULT = null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Mini.Absyn.EDouble(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Exp1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Exp1 ::= _INTEGER_ 
            {
              Mini.Absyn.Exp RESULT = null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Mini.Absyn.EInt(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Exp1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Exp1 ::= _IDENT_ 
            {
              Mini.Absyn.Exp RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Mini.Absyn.EVar(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Exp1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Stm ::= _SYMB_9 Exp _SYMB_0 
            {
              Mini.Absyn.Stm RESULT = null;
		Mini.Absyn.Exp p_2 = (Mini.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Mini.Absyn.SPrint(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Stm ::= _SYMB_2 ListStm _SYMB_3 
            {
              Mini.Absyn.Stm RESULT = null;
		Mini.Absyn.ListStm p_2 = (Mini.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Mini.Absyn.SBlock(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Stm ::= _IDENT_ _SYMB_1 Exp _SYMB_0 
            {
              Mini.Absyn.Stm RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Mini.Absyn.Exp p_3 = (Mini.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Mini.Absyn.SAss(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Stm ::= Type _IDENT_ _SYMB_0 
            {
              Mini.Absyn.Stm RESULT = null;
		Mini.Absyn.Type p_1 = (Mini.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Mini.Absyn.SDecl(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListStm ::= ListStm Stm 
            {
              Mini.Absyn.ListStm RESULT = null;
		Mini.Absyn.ListStm p_1 = (Mini.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Mini.Absyn.Stm p_2 = (Mini.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*ListStm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListStm ::= 
            {
              Mini.Absyn.ListStm RESULT = null;
		 RESULT = new Mini.Absyn.ListStm(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*ListStm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListStm 
            {
              Mini.Absyn.Program RESULT = null;
		Mini.Absyn.ListStm p_1 = (Mini.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Mini.Absyn.Prog(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		Mini.Absyn.Program start_val = (Mini.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

