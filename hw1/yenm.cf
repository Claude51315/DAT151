comment  "//" ; 
comment  "/*" "*/" ;
comment  "#" ; 

position token Id ( (letter | '_') (letter | digit | '_')*) ;

PDefs. Program ::= [Def] ; 
Statements. Def ::= Stm ;

 
SUsing. Def ::= "using" QC ";"; 
{- definitions of Expression-}
SExpr.              Stm  ::= Exp ";" ; 
Ethrow.             Exp  ::= "throw" Exp1 ; 
Econditional.       Exp2 ::= Exp3 "?" Exp2 ":" Exp2 ; 
EAssignment.        Exp2 ::= Exp3 "=" Exp2 ; 
EPlusAssignment.    Exp2 ::= Exp3 "+=" Exp2 ; 
EMinusAssignment.   Exp2 ::= Exp3 "-=" Exp2 ; 

EDisjuction.        Exp3 ::= Exp3 "||" Exp4 ; 
EConsjunction.      Exp4 ::= Exp4 "&&" Exp5 ; 

EEquality.          Exp8 ::= Exp8 "==" Exp9 ; 
EInequality.        Exp8 ::= Exp8 "!=" Exp9;

EGreater.           Exp9 ::= Exp9 ">"  Exp10; 
EGreaterEqual.      Exp9 ::= Exp9 ">=" Exp10; 
ELess.              Exp9 ::= Exp9 "<"  Exp10; 
ELessEqual.         Exp9 ::= Exp9 "<=" Exp10; 

ELeftShift.         Exp10 ::= Exp10 "<<" Exp11 ; 
ERightShift.        Exp10 ::= Exp10 ">>" Exp11 ;

EAdd.               Exp11 ::= Exp11 "+" Exp12;
ESub.               Exp11 ::= Exp11 "-" Exp12;

EMul.               Exp12 ::= Exp12 "*" Exp13;
EDiv.               Exp12 ::= Exp12 "/" Exp13;
Emod.               Exp12 ::= Exp12 "%" Exp13;

EPreIncr.           Exp13 ::= "++" Exp14 ; 
EPreDecr.           Exp13 ::= "--" Exp14; 
EDereference.       Exp13 ::= "*" Exp14 ; 
ENegation.          Exp13 ::= "!" Exp14; 

EDot.               Exp14 ::= Exp14 "." Exp15; 
EArrow.             Exp14 ::= Exp14 "->" Exp15; 
EPostIncr.          Exp14 ::= Exp15 "++" ; 
EPostDecr.          Exp14 ::= Exp15 "--" ;  

EFunctionCall.      Exp15 ::= Id "(" [Exp] ")" ;
EIndexing.          Exp15 ::= Id "[" Exp "]" ;

--EForLoopDecal.      Exp16 ::= Type Literals ; 
Literal.            Exp16 ::= Literals ;

coercions Exp 16 ;
separator Exp "," ; 

{- definition of literals-}
LInt.               Literals ::= Integer ; 
LChar.              Literals ::= Char ; 
LDouble.            Literals ::= Double; 
LString.            Literals ::= [String] ;
separator nonempty  String "" ; 
LTrue.              Literals ::= "true" ;
LFalse.             Literals ::= "false";
LId.                Literals ::= Id ; 
LQC.                Literals ::= QC ; 

{- Declarations -}
SDecl.              Stm ::= Type Id ";" ;
SDecls.             Stm ::= Type Id "," [Id] ";" ; 
SDeclInit.          Stm ::= Type Id "=" Exp  ";" ;

separator Id "," ; 

{-
DeclarationPrefix. Stm ::= DPrefix Type [DList] ";" ; 
separator DList "," ; 
DObj. DList ::= Id ;
DobjInit. DList ::= Id "=" Exp ;  
DPreInline. DPrefix ::= "inline" ;
DPreTypedef. DPrefix ::= "typedef" ;
DPreConst. DPrefix ::= "const" ;
-}

{- Types -}
TRef.               Type ::= Type "&" ; 
TPrefix.            Type ::= Prefix Type; 
TInt.               Type ::= "int" ; 
TVoid.              Type ::= "void"; 
TDouble.            Type ::= "double" ; 
TBool.              Type ::= "bool" ;
TId.                Type ::= Id ; 
TTemplate.          Type ::= Id "<" [Type] ">" ; 
TQC.                Type ::= QC; 

PrefixConst.        Prefix ::= "const";
PrefixTypedef.      Prefix ::= "typedef";
PrefixInline.       Prefix ::= "inline" ;

{- Return Value -}
SReturn.            Stm ::=  "return" Exp ";" ;

{- Qualified Constant -}
QualifiedConst. QC ::= QCList "::" [QCList] ; 
separator nonempty QCList "::" ; 
QCObj. QCList ::= Id ;
QCObjTemplate. QCList ::= Id "<" [Type] ">" ; 
separator nonempty Type "," ; 

{- Function Declaration -}
DFun.               Stm ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ; 
DFunHeader.         Stm ::= Type Id "(" [Arg] ")" ";" ; 
separator Arg "," ;
ADecl.              Arg ::=  Type Id;  
ADeclType.          Arg ::=  Type ;
--ADeclRefType.     Arg ::=  Type "&" ;
--ADeclRef.         Arg ::=  Type "&" Id ;  


SWhile.             Stm ::= "while" "(" Exp ")" Stm ; 
SDoWhile.           Stm ::= "do" Stm "while" "(" Exp ")" ";" ; 
SFor.               Stm ::= "for" "(" Stm  Exp ";" Exp ")" Stm ; 
SIf.                Stm ::= "if" "(" Exp ")" Stm ; 
SIfElse.            Stm ::= "if" "(" Exp ")" Stm "else" Stm ; 
SBlock.             Stm ::= "{" [Stm] "}" ; 


terminator Stm "" ;
terminator Def "" ; 


